
/**
 * Tarea Catching Something
 *
 * Un changuito tiene hambre y busca atrapar la mayor cantidad de bannanas posibles!
 *
 * @author Cristina Jimenez
 * @version 1
 * @date 03/02/2016
 */
import java.applet.Applet;
import java.applet.AudioClip;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.net.URL;
import java.util.LinkedList;

import java.awt.Color;
import static java.awt.Color.red;
import java.awt.Dimension;
import java.awt.Font;
import javax.swing.JFrame;
import javax.swing.JPanel;


public class TareaCatching extends Applet implements Runnable, MouseMotionListener, MouseListener {

   
    private Base basPrincipal;      //OBJ PRINCIPAL
    
    private Base basSecundaria;     //OBJ SECUNDARIO  
    
    private LinkedList lklBanana;   //LISTA DE RANDOM BANANAS 
    
    private Image imaImagenFondo;   //BACKGROUND IMAGE
     
    private Image imaOverFondo;     //IMAGEN DE PERDISTE     
    
    //MOUSE PRESSED
    
    private int iOffX;              //OFFSET DE COORDENADAS
    private int iOffY; 
     
    private boolean bMouPressed;    //BOOL MOUSE PRESSED       
    
    //MOUSE DRAGGED
    
    private int iDraggedX;                  //POS X
    private int iDraggedY;                  //POS Y
    private boolean bMouDragged;            //BOOL DRAGGED
    

    private Image    imaImagenApplet;       //IMAGE APPLET
    private Graphics graGraficaApplet;      //IMAGE OBJ GRAFICO 
    
    //BOOL COLISION
    boolean bCol; 
    
    //VARIABLES DE AUDIO 
    private AudioClip uh;                   //CUANDO SE COME LA BANANA  
    private AudioClip choca;                //CUANDO LLEGA AL PISO LA BANANA 
    
    
    private int iVel;                       //VAR VELOCIDAD
    private int iVidas;                     //VAR VIDAS
    
    
    private int iYAnteriorerior;            //VAR POSISION Y ANT
    
    private int iColSuelo;                  //CONT DE COLISIONES DE BANANAS(10 -> -1 VIDA)
    private int iPuntos;                    //PUNTOS GAMER 
    
    
    
    /** 
     * init
     * 
     * Metodo sobrescrito de la clase <code>Applet</code>.<P>
     * En este metodo se inizializan las variables o se crean los objetos
     * a usarse en el <code>Applet</code> y se definen funcionalidades.
     * 
     */
    public void bananaInit(){
        
        //IMA BANANA 
	URL urlImagenSecundaria = this.getClass().getResource("Bananas.png");
        
         lklBanana = new LinkedList();               // INICIALIZA LINKEDLIST 
        
        //INSERTA LAS BANANAS EN POSICIONES ALEATORIAS
        for (int iC = 0; iC < 5; iC++){
            
            basSecundaria = new Base( 0 , 0,
                Toolkit.getDefaultToolkit().getImage(urlImagenSecundaria));
            
            basSecundaria.setX((int)(Math.random()*700+ 50));
            basSecundaria.setY((int)(Math.random()*200 - 250));
                    
            lklBanana.add(basSecundaria);
        }
        
        iVel = 1;                                   //INICIALIZA VELOCIDAD DE LAS BANANAS 
    }
    public void monkeyInit(){
        
        //IMA PERSONAJE PRINCIPAL
	URL urlImagenPrincipal = this.getClass().getResource("monkey.png");
        
        //OBJ PRINCIPAL 
	basPrincipal = new Base(0, 0,
                Toolkit.getDefaultToolkit().getImage(urlImagenPrincipal));

        basPrincipal.setX(80);                       //POS EN APPLET 
        basPrincipal.setY(50);
        iVidas = 5;                                 //ESTABLECE EL NUMERO DE VIDAS INICIALES   
        
    }
    public void fondoInit(){
    
        setSize(800,500);               //ASIGNA EL TAMANO DEL APPLET
        
        //IMA FONDO 
        URL urlImagenFondo = this.getClass().getResource("jungle.jpg");
        imaImagenFondo = Toolkit.getDefaultToolkit().getImage(urlImagenFondo);
        
        //IMA JUEGO PERDIDO 
        URL urlOverFondo = this.getClass().getResource("gameover.png");
        imaOverFondo = Toolkit.getDefaultToolkit().getImage(urlOverFondo);
    }
    public void mouseInit(){
        
        addMouseListener(this);                     //+MOUSELISTENER
        addMouseMotionListener(this);               //+MOUSEMOTIONLISTENER
        
        bMouPressed = false;                        //INICIALIZA MOUSEPRESSED
       
        iDraggedX = 0;                              //INICIALIZA MOUSEDRAGGED
        iDraggedY = 0;
        bMouDragged = false;
        
    }
    public void audioInit(){
        
        //INICIALIZACION DE AUDIOS 
        URL uhURL = this.getClass().getResource("uh.wav");      
          uh = getAudioClip(uhURL);
        URL chocaURL = this.getClass().getResource("drop.wav");
          choca = getAudioClip(chocaURL);
        
    }
    public void init() {
        bananaInit();
        monkeyInit();
        fondoInit();
        mouseInit();
        audioInit();
        
        iOffX = 0;                                  //INICIALIZA OFFSET
        iOffY = 0;
        
        bCol = false;                               //INICIALIZA LA BOOLEANA DE COLISION 
        
        iYAnteriorerior = 0;                        //INICIALIZA POSICION DE 'Y' ANTERIOR
        
        iColSuelo = 10;
        iPuntos = 0;
    }
	
    /** 
     * start
     * 
     * Metodo sobrescrito de la clase <code>Applet</code>.<P>
     * En este metodo se crea e inicializa el hilo
     * para la animacion este metodo es llamado despues del init o 
     * cuando el usuario visita otra pagina y luego regresa a la pagina
     * en donde esta este <code>Applet</code>
     * 
     */
    public void start () {
        // Declarar hilo
        Thread th = new Thread (this);
        // Empezar hilo
        th.start ();
    }
	
    /** 
     * run
     * 
     * Metodo sobrescrito de la clase <code>Thread</code>.<P>
     * En este metodo se ejecuta el hilo, que contendr√° las instrucciones
     * de nuestro juego.
     * 
     */
    public void run () {
        
        //CICLO PARA HACER FUNCIONAR EL JUEGO 
        while (true) {
            actualiza();
            checaColision();
            repaint();
            try	{
                //THEAD
                Thread.sleep (20);
            }
            catch (InterruptedException iexError) {
                System.out.println("Hubo un error en el juego " + 
                        iexError.toString());
            }
		}
    }
	
    /** 
     * actualiza
     * 
     * Metodo que actualiza la posicion de los objetos 
     * 
     */
    
    public void dentroApplet(){
        //RESTRINGE QUE LOS OBJETOS SE MANTENGAN DENTRO DEL APPLET 
            if (basPrincipal.getX() <= 0){
                basPrincipal.setX(5);

            }
            if (basPrincipal.getX()+ basPrincipal.getAncho() >= 800){
                basPrincipal.setX(800 - basPrincipal.getAncho()-5);

            }
            if (basPrincipal.getY() <= 0){
                basPrincipal.setY(5);
            }
            if (basPrincipal.getY()+ basPrincipal.getAlto() >= 500){
                basPrincipal.setY(500 - basPrincipal.getAlto() - 5);
            }  
    }
    public void actBananas(){
        
       //CUANDO SE PIERDEN BANANAS SE PIERDEN PUNTOS Y SE AUMENTA LA VELOCIDAD 
       //DE APARICIONES DE LAS BANANAS EN EL APPLET
        if(iColSuelo == 0){
            iColSuelo = 10;
            iVidas--;
            iVel++;
        }
        
       //ACTUALIZA POS DE LAS BANANAS SI AUN TIENE VIDAS PARA CONTINUAR EL JUEGO
       if (iVidas > 0){

            for (Object obj: lklBanana){
                Base basTemp = (Base)obj;
                
                basTemp.setY(basTemp.getY() + 2 * iVel);
            }
        }
    }
    public void actMonkey(){
        //CONDICIONA SI BOOL MOUSE DRAGGED
        if (bMouDragged){ 
            // MOVIMIENTO DE MOUSE DRAGGED
            basPrincipal.setX(iDraggedX-iOffX);
            basPrincipal.setY(iDraggedY-iOffY);
            }
    }
    public void actualiza(){
        

        dentroApplet();
        actBananas();
        actMonkey();


            
    }
	
    /**
     * checaColision
     * 
     * Metodo que checa colision entre objetos
     * 
     */
    public void checaColision(){
        //CHECA LAS COLICIONES Y REALIZA LAS OPERACIONES PARA DAR O QUITAR PUNTOS/VIDAS
        //EJECUCION DE LOS SONIDOS SI EXISTEN LAS COLISIONES
        for(Object obj: lklBanana){
            Base basTemp = (Base)obj;
            if (basPrincipal.getY() > (basTemp.getY() + basTemp.getAlto() - 20) &&
                    iDraggedY < iYAnteriorerior){
                if (basPrincipal.colisiona(basTemp)){  
                    basTemp.setX((int)(Math.random()*700+ 50));
                    basTemp.setY((int)(Math.random()*200 - 250));             
                    iPuntos += 100;
                    uh.play();
                }   
            }
        }
        for(Object obj: lklBanana){
            Base basTemp = (Base)obj;          
            if ( basTemp.getY() + basTemp.getAlto() > 500 ){
                basTemp.setX((int)(Math.random()*700+ 50));
                basTemp.setY((int)(Math.random()*200 - 250));  
                iColSuelo--;
                iPuntos -=20;
                choca.play(); 
            }
        }   
    }
    
    /**
     * update
     * 
     * Metodo sobrescrito de la clase <code>Applet</code>,
     * heredado de la clase Container.<P>
     * En este metodo lo que hace es actualizar el contenedor y 
     * define cuando usar ahora el paint
     * 
     * @param graGrafico es el <code>objeto grafico</code> usado para dibujar.
     * 
     */
    public void update (Graphics graGrafico){
        //DOUBLEBUFFER 
        if (imaImagenApplet == null){
                imaImagenApplet = createImage (this.getSize().width, 
                        this.getSize().height);
                graGraficaApplet = imaImagenApplet.getGraphics ();
        }       
        //CONTINUA MOSTRANDO FONDO DE JUNGLA MIENTRAS TENGA VIDAS, SINO MUESTRA FOTO DE GAMEOVER
        if (iVidas > 0){
            //ACTUALIZA JUNGLE
            URL urlImagenFondo = this.getClass().getResource("jungle.jpg");
            Image imaImagenFondo = Toolkit.getDefaultToolkit().getImage(urlImagenFondo);
            graGraficaApplet.drawImage(imaImagenFondo, 0, 0, getWidth(), getHeight(), this);
        }
        else {
            //GAMEOVER
        URL urlOverFondo = this.getClass().getResource("gameover.png");
        Image imaOverFondo = Toolkit.getDefaultToolkit().getImage(urlOverFondo);
         graGraficaApplet.drawImage(imaOverFondo, 0, 0, getWidth(), getHeight(), this);
        }
        //FOREGROUND
        graGraficaApplet.setColor (getForeground());
        paint(graGraficaApplet);        
        graGrafico.drawImage (imaImagenApplet, 0, 0, this);
    }
    
    public void despliegaEstatus(Graphics graDibujo){
        
        //SE DESPLIEGA ESTATUS DEL JUGADOR EN EL APPLET 
        graDibujo.setColor(Color.white);
        graDibujo.drawString("Vidas: " + iVidas, 520, 50);
        graDibujo.drawString("Bananas: " + iColSuelo, 600, 50);
        graDibujo.drawString("Score: " + iPuntos, 700, 50);
        
    }
    public void dibujaPersonajes(Graphics graDibujo){
        
                //PAINT CHANGO
                basPrincipal.paint(graDibujo, this);
                
                //PAINT BANANAS
                for(Object obj: lklBanana){
                    Base basTemp = (Base)obj;
                    basTemp.paint(graDibujo, this);
                }
        
    }
    public void dibujaFondo(Graphics graDibujo){
        // Dibuja imagen de fondo
        graDibujo.drawImage(imaImagenFondo, 0, 0, getWidth(), getHeight(), this);
    }
    public void dibujaOver(Graphics graDibujo){
        //Dibuja imagen de Game Over!
        graDibujo.drawImage(imaOverFondo, 0, 0, getWidth(), getHeight(), this);
        
    }
    /**
     * paint
     * 
     * Metodo sobrescrito de la clase <code>Applet</code>,
     * heredado de la clase Container.<P>
     * En este metodo se dibuja la imagen con la posicion actualizada,
     * ademas que cuando la imagen es cargada te despliega una advertencia.
     * 
     * @param graDibujo es el objeto de <code>Graphics</code> usado para dibujar.
     * 
     */
    public void paint(Graphics graDibujo) {
        
        //PAINT OBJ
        if (basPrincipal != null && imaImagenFondo != null && iVidas > 0) {	
            dibujaFondo(graDibujo);
            dibujaPersonajes(graDibujo);
        } //TODO MIENTRAS SE TENGAN VIDAS SUFICIENTES PARA CONTINUAR
        
        else if (basPrincipal != null && imaOverFondo != null && iVidas == 0) {
            dibujaOver(graDibujo);
        }
        else {
                	
                graDibujo.drawString("No se cargo la imagen..", 20, 20);
        }
        despliegaEstatus(graDibujo);
    }
    
    /**
     * Si el mouse se preciona encima de la imagen, el jugador puede arrastrar
     * al objeto. Si se toca el borde del applet, el jugador tiene que volver
     * a agarrar el tiburon 
     * @param mouEvent 
     */
    @Override
    public void mouseDragged(MouseEvent mouEvent) {
        
        if (bMouPressed){
            
            iYAnteriorerior = iDraggedY;
            iDraggedX = mouEvent.getX();
            iDraggedY = mouEvent.getY();
            
            if (basPrincipal.colisiona()){
                bMouDragged = true;}
            else
            {
                bMouDragged = false;
                bMouPressed = false;
                
            }
                
        
        }
    }

    @Override
    public void mouseMoved(MouseEvent me) {
        
    }

    @Override
    public void mouseClicked(MouseEvent me) {
        
    }

    /**
     * Graba coordenadas de objeto, si el click es dentro del objeto
     * 
     * @param mouEvent 
     */
    @Override
    public void mousePressed(MouseEvent mouEvent) {
        
        if (basPrincipal.colisiona(mouEvent.getX(), mouEvent.getY()) &&
                iVidas > 0){
            
            iOffX = mouEvent.getX() - basPrincipal.getX(); 
            iOffY = mouEvent.getY()- basPrincipal.getY();
            bMouPressed = true;
            
        }
        
        if (iVidas == 0)
        {
            iVidas = 3;
            iVel = 1;
        }
        
    }

    @Override
    public void mouseReleased(MouseEvent mouEvent) {
        
        bMouPressed = false;
        bMouDragged = false;
        iYAnteriorerior = 0;
    }

    @Override
    public void mouseEntered(MouseEvent me) {
        
    }

    @Override
    public void mouseExited(MouseEvent me) {
        
    }
}
